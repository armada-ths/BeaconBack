<!DOCTYPE html>
<html>

<link rel="stylesheet" href="/../css/normalize.css">
<link href="/../css/dataTable.css" rel="stylesheet">
<link href="/../css/markerwithlabel.css" rel="stylesheet">
<script type="text/javascript" src="/../js/all.js"></script>
<head>
<title>Armada - Beacon System</title>
</head>
<body>

<section>
	<table id="checkpoint-table" class="checkpoint-table-container" border="1" cellpadding="7" cellspacing="7">
        <thead>
        <tr role="row">
            <th width="100px">Name</th>
            <th width="100px">Passed</th>
        </tr>
        </thead>
        <tbody>
        <tr role="row">
        </tr>
        </tbody>
    </table>

	 <div id="panel">
      <button onclick="toggleHeatmap()">Toggle Heatmap</button>
      <button onclick="changeGradient()">Change gradient</button>
      <button onclick="changeRadius()">Change radius</button>
      <button onclick="changeOpacity()">Change opacity</button>
    </div>
    <div id="map-canvas"></div>
</section>

  </body>
</html>


<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.15&libraries=geometry"></script>
<script src="/../js/markerwithlabel.js" type="text/javascript"></script>
<script src="/../js/jquery.dataTables.min.js"></script>

<script type="text/javascript">

//CHECKPOINT STATUS, tables


var table;
$(document).ready( function () {
    table = $('#checkpoint-table').dataTable( {
        "bServerSide": true,
        //"sAjaxSource": "/armadaloppet/checkpointStatus",
        "sDom": 't',
        "ajax": {
            type: "GET",
            dataType: 'json',
            url: '/armadaloppet/checkpointStatus'
        }
    } );
    setInterval( function () {
        //table.api().ajax.reload();
        table.fnDestroy();
        table = $('#checkpoint-table').dataTable( {
        "bServerSide": true,
        //"sAjaxSource": "/armadaloppet/checkpointStatus",
        "sDom": 't',
        "ajax": {
            type: "GET",
            dataType: 'json',
            url: '/armadaloppet/checkpointStatus'
        }
        } );
    }, 60000 );
    
} );

//MAP STUFF

var map, pointArray, heatmap;
var markers = [];
var heatMarkers = [];
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPositionOnMap);
    } 
}

function showPositionOnMap(position)
{
    initialize(position.coords.latitude, position.coords.longitude);
}

function initialize(long, lati) {
  var mapOptions = {
    zoom: 12,
    center: new google.maps.LatLng(long, lati),
    mapTypeId: google.maps.MapTypeId.HYBRID,
  };

  map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);

  map.controls[google.maps.ControlPosition.TOP_CENTER].push(
      document.getElementById('info'));
}

var fetchPlaces = function() {

    //var infowindow =  new google.maps.InfoWindow({
    //    content: ''
    //});
    
    for (var i = 0; i < heatMarkers.length; i++) {
        heatMarkers[i].setMap(null);
    }

    $.ajax({
        type: 'GET',
        url : '/fair/heatMap',
        dataType : 'json',
        success : function(response) {

            if (response.status == 'OK') {
                heatpoints = response.data;

                // loop through places and add markers
                	
            	for(i =0; i <heatpoints.length; i++)
            	{
					heatMarkers.push({location: new google.maps.LatLng(heatpoints[i].pos_lat, heatpoints[i].pos_long), weight: heatpoints[i].amount});
            	}
            	var pointArray = new google.maps.MVCArray(heatMarkers);

				heatmap = new google.maps.visualization.HeatmapLayer({
					data: pointArray
				});

				heatmap.setMap(map);

                }
            }
        }
    });

    for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
    }

    $.ajax({
        type: 'GET',
        url : '/fair/checkpointMap',
        dataType : 'json',
        success : function(response) {

            if (response.status == 'OK') {
                checkpoints = response.checkpoints;

                // loop through places and add markers
                for (i in checkpoints) {

                    var tmpLatLng;
                    if(checkpoints[i].cords)
                    {
                        var bound = new google.maps.LatLngBounds();
                        for (var j = 0; j < checkpoints[i].cords.length; j++) {
                          bound.extend( new google.maps.LatLng(checkpoints[i].cords[j].lat, checkpoints[i].cords[j].long) );
                        }

                        tmpLatLng = bound.getCenter();
                    }
                    else
                    {
                        return;
                    }


                    var label = new MarkerWithLabel({
                        map: map,
                        draggable: false,
                        //labelContent: "$hej",
                        labelText: checkpoints[i].name +': '+checkpoints[i].passed,
                        labelAnchor: new google.maps.Point(22, 0),
                        labelClass: "map-label",
                        labelInBackground: false,
                        marker: MarkerWithLabel,
                        optimized: false,
                        //position: new google.maps.LatLng(long, lati)
                        position: tmpLatLng
                    });                

                    // not currently used but good to keep track of markers
                    markers.push(label);
                }
            }
        }
    });
};

window.setInterval(function(){
  fetchPlaces();
}, 10000);


function toggleHeatmap() {
  heatmap.setMap(heatmap.getMap() ? null : map);
}

function changeGradient() {
  var gradient = [
    'rgba(0, 255, 255, 0)',
    'rgba(0, 255, 255, 1)',
    'rgba(0, 191, 255, 1)',
    'rgba(0, 127, 255, 1)',
    'rgba(0, 63, 255, 1)',
    'rgba(0, 0, 255, 1)',
    'rgba(0, 0, 223, 1)',
    'rgba(0, 0, 191, 1)',
    'rgba(0, 0, 159, 1)',
    'rgba(0, 0, 127, 1)',
    'rgba(63, 0, 91, 1)',
    'rgba(127, 0, 63, 1)',
    'rgba(191, 0, 31, 1)',
    'rgba(255, 0, 0, 1)'
  ]
  heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);
}

function changeRadius() {
  heatmap.set('radius', heatmap.get('radius') ? null : 20);
}

function changeOpacity() {
  heatmap.set('opacity', heatmap.get('opacity') ? null : 0.2);
}

google.maps.event.addDomListener(window, 'load', getLocation);

</script>